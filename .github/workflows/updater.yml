name: SeaweedFS EC Automated Docker Builder

on:
  schedule:
    # Run every hour
    - cron: "0 * * * *"
  workflow_dispatch:
    inputs:
      force_version:
        description: 'Force specific SeaweedFS version'
        required: false
        type: string
      ec_config:
        description: 'EC configuration to build (default: all available)'
        required: false
        type: string
        default: 'all'
      build_all_configs:
        description: 'Build all available EC configurations'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io

jobs:
  detect-configs:
    runs-on: ubuntu-latest
    outputs:
      configs: ${{ steps.get-configs.outputs.configs }}
      config_matrix: ${{ steps.get-configs.outputs.matrix }}
      default_config: ${{ steps.get-configs.outputs.default }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect available EC configurations
        id: get-configs
        run: |
          # Get all available EC configurations from Dockerfiles
          CONFIGS=$(ls Dockerfile.ec* 2>/dev/null | sed 's/Dockerfile\.ec//' | sed -E 's/([0-9]+)([0-9]{1,2})$/\1-\2/' | sort)
          DEFAULT_CONFIG=$(echo "$CONFIGS" | head -1)
          
          if [ -z "$CONFIGS" ]; then
            echo "No EC configuration Dockerfiles found!"
            exit 1
          fi
          
          echo "Available configurations: $CONFIGS"
          echo "Default configuration: $DEFAULT_CONFIG"
          
          # Create JSON array for matrix strategy
          MATRIX_JSON=$(echo "$CONFIGS" | tr ' ' '\n' | jq -R -s -c 'split("\n")[:-1]')
          
          # Convert CONFIGS to a space-separated string for output
          CONFIGS_STR=$(echo "$CONFIGS" | tr '\n' ' ' | sed 's/ *$//')
          
          echo "configs=$CONFIGS_STR" >> $GITHUB_OUTPUT
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "default=$DEFAULT_CONFIG" >> $GITHUB_OUTPUT

  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine version to build
        id: determine-version
        run: |
          if [[ "${{ github.event.inputs.force_version }}" != "" ]]; then
            VERSION="${{ github.event.inputs.force_version }}"
            echo "Using forced version: $VERSION"
          else
            # Get latest SeaweedFS release
            VERSION=$(curl -s https://api.github.com/repos/seaweedfs/seaweedfs/releases/latest | jq -r .tag_name)
            echo "Using latest SeaweedFS version: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-and-push:
    needs: [get-version, detect-configs]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        ec_config: ${{ fromJson(needs.detect-configs.outputs.config_matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.ec_config }}-${{ needs.get-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.ec_config }}-
            ${{ runner.os }}-buildx-

      - name: Check if specific config requested
        id: check-config
        run: |
          REQUESTED_CONFIG="${{ github.event.inputs.ec_config }}"
          CURRENT_CONFIG="${{ matrix.ec_config }}"
          BUILD_ALL="${{ github.event.inputs.build_all_configs }}"
          
          # Skip if specific config requested and this isn't it
          if [[ "$REQUESTED_CONFIG" != "" && "$REQUESTED_CONFIG" != "all" && "$REQUESTED_CONFIG" != "$CURRENT_CONFIG" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping $CURRENT_CONFIG (requested: $REQUESTED_CONFIG)"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Building $CURRENT_CONFIG"
          fi

      - name: Set build variables
        id: build-vars
        if: steps.check-config.outputs.skip == 'false'
        run: |
          # Convert config format (e.g., "9-3" -> "93" for Dockerfile name)
          DOCKERFILE_SUFFIX=$(echo "${{ matrix.ec_config }}" | sed 's/-//g')
          DOCKERFILE="Dockerfile.ec$DOCKERFILE_SUFFIX"
          
          # Generate image name (force repository to lowercase)
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_SUFFIX="seaweedfs-ec$DOCKERFILE_SUFFIX"
          IMAGE_NAME="${{ env.REGISTRY }}/${REPO_LC}/$IMAGE_SUFFIX"
          
          echo "dockerfile=$DOCKERFILE" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "image_suffix=$IMAGE_SUFFIX" >> $GITHUB_OUTPUT
          
          echo "Using Dockerfile: $DOCKERFILE"
          echo "Image name: $IMAGE_NAME"

      - name: Verify Dockerfile exists
        if: steps.check-config.outputs.skip == 'false'
        run: |
          if [ ! -f "${{ steps.build-vars.outputs.dockerfile }}" ]; then
            echo "❌ Error: ${{ steps.build-vars.outputs.dockerfile }} not found"
            exit 1
          fi
          echo "✅ Dockerfile found: ${{ steps.build-vars.outputs.dockerfile }}"

      - name: Build and push Docker images
        if: steps.check-config.outputs.skip == 'false'
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg BRANCH=${{ needs.get-version.outputs.version }} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            --cache-from type=registry,ref=${{ steps.build-vars.outputs.image_name }}:cache \
            --cache-to type=registry,ref=${{ steps.build-vars.outputs.image_name }}:cache,mode=max \
            -f ${{ steps.build-vars.outputs.dockerfile }} \
            -t ${{ steps.build-vars.outputs.image_name }}:${{ needs.get-version.outputs.version }} \
            -t ${{ steps.build-vars.outputs.image_name }}:latest \
            --push \
            .

      - name: Move cache
        if: steps.check-config.outputs.skip == 'false'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Generate build summary
        if: steps.check-config.outputs.skip == 'false'
        run: |
          echo "## 🐳 Docker Build Summary - EC ${{ matrix.ec_config }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**SeaweedFS Version:** \`${{ needs.get-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**EC Configuration:** \`${{ matrix.ec_config }}\` ($(echo ${{ matrix.ec_config }} | cut -d'-' -f1) data + $(echo ${{ matrix.ec_config }} | cut -d'-' -f2) parity shards)" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** \`${{ steps.build-vars.outputs.dockerfile }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Image" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.build-vars.outputs.image_name }}:${{ needs.get-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ steps.build-vars.outputs.image_name }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  build-summary:
    needs: [build-and-push, detect-configs, get-version]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate overall summary
        run: |
          echo "## 🎯 Overall Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**SeaweedFS Version:** \`${{ needs.get-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Available EC Configurations:** ${{ needs.detect-configs.outputs.configs }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 EC Configuration Details" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration | Data Shards | Parity Shards | Total Shards | Storage Overhead |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------------|---------------|--------------|------------------|" >> $GITHUB_STEP_SUMMARY
          
          # Parse configurations and generate table
          for config in ${{ needs.detect-configs.outputs.configs }}; do
            data=$(echo $config | cut -d'-' -f1)
            parity=$(echo $config | cut -d'-' -f2)
            total=$((data + parity))
            overhead=$(( (parity * 100) / data ))
            echo "| EC $config | $data | $parity | $total | ${overhead}% |" >> $GITHUB_STEP_SUMMARY
          done